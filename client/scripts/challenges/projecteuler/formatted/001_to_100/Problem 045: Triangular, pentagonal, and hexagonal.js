
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Problem 45: Triangular, pentagonal, and hexagonal
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:</p>
/// <br>
/// <p class="euler__paragraph">Triangle</p>
/// <br>
/// <p class="euler__paragraph">$T_n=n(n+1)/2$</p>
/// <p class="euler__paragraph">1, 3, 6, 10, 15, ...</p>
/// <br>
/// <p class="euler__paragraph">Pentagonal</p>
/// <br>
/// <p class="euler__paragraph">$P_n=n(3n−1)/2$</p>
/// <p class="euler__paragraph">1, 5, 12, 22, 35, ...</p>
/// <br>
/// <p class="euler__paragraph">Hexagonal</p>
/// <br>
/// <p class="euler__paragraph">$H_n=n(2n−1)$</p>
/// <p class="euler__paragraph">1, 6, 15, 28, 45, ...</p>
/// <br>
/// <p class="euler__paragraph">It can be verified that $T_{285} = P_{165} = H_{143} = 40755$.</p>
/// <br>
/// <p class="euler__paragraph">Find the next triangle number that is also pentagonal and hexagonal.</p></div>

/// challengeSeed:
function euler45() {
  // Good luck!
  return true;
}

euler45();

/// solutions:
function euler45() {
  function triangular(num) {
    return (num * (num + 1)) / 2;
  }

  function isPentagonal(num) {
    // Formula found by completing the square and
    // solving for n.
    const n = (Math.sqrt((24 * num) + 1) + 1) / 6;
    return n % 1 === 0;
  }

  function isHexagonal(num) {
    // Formula found by completing the square and
    // solving for n.
    const n = Math.sqrt(0.5 * (num + (1 / 8))) + 0.25;
    return n % 1 === 0;
  }

  let iTri = 40755;
  let tri;
  let found = false;
  while (!found) {
    iTri++;
    tri = triangular(iTri);
    if (isPentagonal(tri) && isHexagonal(tri)) {
      found = true;
    }
  }
  return tri;
}

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof euler45 === 'function', 'message: <code>euler45()</code> is a function.');
assert.strictEqual(euler45(), 1533776805, 'message: <code>euler45()</code> should return 1533776805.');
/// id: 5900f3991000cf542c50feac
